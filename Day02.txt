1. JSX란?
     - JSX는 자바스크립트의 확장 문법임, XML과 매우 유사하게 생김
     - JSX는 브라우저에서 실행되기 전에 일반 자바스크립트 코드로 변환됨
     - JSX코드는 보기 편하고 HTML 코드를 작하는 것과 비슷함
     - JSX코드로 작성된 컴포넌트는 태그처럼 사용이 가능해짐

2. JSX문법
     - 컴포넌트에 여러 요소가 포함되면 반드시 부모요소 하나로 묶어줘야 함
     - 부모요소는 대부분 <Fragment></Fragment>, <> </>(Fragment의 다른 표현)(import필요),
         <div></div>등을 사용
     - 자바스크립트 표현식을 사용할 수 있다.
     - ****자바스크립트의 표현식은 {}로 감싸서 사용
     - JSX에서는 if문 사용 불가능 so, 3항 조건연산자를 사용
     - &&연산자를 이용하여 조건부 렌더링 가능(false일 경우 null)
     - 컴포넌트나 태그에 인라인 스타일을 사용할 경우 카멜케이스를 따른다
        ex) background-color => backgroundColor
     - class대신 className을 사용한다.
     - HTML에서는 닫는 태그가 존재하는 태그들을 닫지 않아도 에러가 나지 않는데
        JSX에서는 닫는 태그들을 닫지 않으면 에러가 뜸
     - JSX 구간에서(return부분) 주석은 {/**/}로 사용한다

//자동정렬
프로젝트 폴더 최상위에 .prettierrc 생성
    {
    "singleQuote": true,
    "semi": true,
    "useTabs": false,
    "tabWidth": 2
    }
format on save

3. 리액트의 컴포넌트
     - 리액트의 컴포넌트는 두 가지의 형태가 있음
        클래스형 컴포넌트
        함수형 컴포넌트(rsc)
     - 리액트 공식 문서에서는 함수형 컴포넌트와 Hooks를 사용하는 것을 권장하고 있음

4. 클래스형 컴포넌트
     - class 컴포넌트명 extends Component {
        render(){

        }
     }
     - 클래스 내에서 render 메소드를 호출하여 렌더링을 진행

5. 함수형 컴포넌트
     - function 컴포넌트명(){
        return;
     }
     - const 컴포넌트명 = () => {
        return;
     }
     - return문을 이용하여 렌더링 진행
     - 클래스형 컴포넌트와 함수형 컴포넌트의 성능은 비슷하지만 함수형이 메모리를 적게 사용함
     - 리액트에서 권장하는 함수형 컴포넌트를 사용할듯

6. props
     - props는 컴포넌트의 속성값임
     - 컴포넌트의 속성을 설정할 때 사용
     - props 값들은 부모 컴포넌트에서만 지정 및 변경 가능
     - props의 기본 값 설정
        props컴포넌트 안에서 defaultProps 키워드 설정

7. children
     - props의 속성 값중 한가지
     - 컴포넌트가 호출된 태그 사이의 내용을 담고 있는 속성

8. 부모 컴포넌트와 자식 컴포넌트
     - 호출하는 컴포넌트가 부모 컴포넌트가 되고,
        호출당하는 컴포넌트가 자식 컴포넌트가 됨
     - 따라서 호출하는 컴포넌트에서 호출당하는 컴포넌트의 props 값들을 지정할 수 있음

9. props의 비구조화 할당
     - ES6의 비구조화 할당 문법으로 props를 나눠서 사용할 수 있음

10. state
     - 현재 자식 컴포넌트에서 변경할 수 있는 속성 값들은 state
     - state는 클래스형 컴포넌트에서만 사용가능
     - 함수형 컴포넌트에서는 useState라는 Hooks로 state대신 사용
     - useState를 사용할 때는 항상 속성값과 속성값을 설정하는 setter메소드를 한 쌍으로 선언함

11. state 사용 시 주의점
     - state는 항상 setter 함수를 이용해서 설정해야됨
     - 부모 컴포넌트의 state를 자식 컴포넌트의 props로 전달하여 자주 사용

12. 리액트에서의 이벤트 핸들링
     - 카멜케이스 표기법을 사용함(onclick => onClick, onkeyup => onKeyUp)
     - 이벤트에서 실행할 내용은 일반 자바스크립트 코드의 형태가 아니고, 함수형태로 전달해야 됨
         (이벤트에 직접 화살표 함수를 전달해도 되고, 외부에서 함수를 만들어서 전달해도 됨)
     - DOM요소에만 이벤트가 등록이 가능하고 컴포넌트에는 이벤트 등록이 불가능하다

13. 리액트에서 DOM요소에 이름달기
     - HTML에서는 DOM요소에 이름을 달 때 id, class를 주로 사용
     - JSX에서는 ref를 주로 사용함
     - JSX에서도 id값을 사용할 수 있지만 같은 컴포넌트를 여러개 사용했을 때 동일한 id의 DOM요소가
        여러개 생성되어 id의 유일성이 파괴되기 때문
     - ref를 사용하여 같은 컴포넌트가 여러개 생성되도 다른 ref값을 갖도록 설정할 수 있다.

14. useRef
     - 특정 DOM요소나 특정 컨포넌트에 직접 접근해야 할 때 ref를 달아서 접근함